@using Microsoft.AspNetCore.Mvc
@using apiexamen.Data.Models
@using apiexamen
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

@inject IConfiguration Configuration
@inject HttpClient Http
@rendermode InteractiveServer

@page "/"
<style>
    .toast {
    position: fixed;
    top: 10px;
    right: 10px;
    background-color: rgb(5 22 61);
    color: white;
    padding: 15px;
    border-radius: 5px;
    width: 400px;
    height: 150px;
    display: block;
    z-index: 99999;
    }
    .form-div{
    padding: 20px 15px;
    border-radius: 0px;
    box-shadow: inset 0px 6px 0px 0px #1b6ec2;
    margin: 10px 5px;
    }
    .grid{
    display: grid;
    grid-template-columns: 100px 100px;
    gap: 10px;
    }
    .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    }

    .modal-content {
    background: white;
    padding: 20px;
    border-radius: 8px;
    max-width: 500px;
    text-align: left;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    }


</style>

<button @onclick="() => HandleClick(1)" class="btn btn-primary">Agregar Examen</button>
<button @onclick="() => HandleClick(2)" class="btn btn-primary">Buscar Examen</button>
<button @onclick="() => HandleClick(3)" class="btn btn-primary">Buscar Por Id</button>





@if (showForm) {
    <div class="form-div">
        <EditForm EditContext="@examContext" OnSubmit="@Submit" FormName="ExamForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            @if (byId || add) {
                <div class="form-group">
                    <label for="id">Id</label>
                    <InputNumber id="idExam" class="form-control" @bind-Value="ExamModel!.IdExamen" />
                </div>
            }


            @if(add || filter){
                <div class="form-group">
                    <label for="nombre">Nombre</label>
                    <InputText id="name" class="form-control" @bind-Value="ExamModel.Nombre" />
                </div>

                <div class="form-group">
                    <label for="descripcion">Descripción</label>
                    <InputText id="desc" class="form-control" @bind-Value="ExamModel.Descripcion" />
                </div>
            }


            <br />
            <div class="grid">
                <button type="submit" class="btn btn-primary">@submitText</button>
                @if (showForm)
                {
                    <button @onclick="CloseACtion" class="btn btn-primary">Cancelar</button>
                }
            </div>

        </EditForm>
    </div>
}


@if (showPopup)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h4>Editar</h4>
            <EditForm EditContext="@examContext" OnSubmit="@UpdateExam" FormName="ExamUpdateForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="nombre">Nombre</label>
                    <InputText id="name" class="form-control" @bind-Value="ExamModel.Nombre" />
                </div>

                <div class="form-group">
                    <label for="descripcion">Descripción</label>
                    <InputText id="desc" class="form-control" @bind-Value="ExamModel.Descripcion" />
                </div>


                <br />
                <div class="grid">
                    <button type="submit" class="btn btn-primary">@submitText</button>
                    <button @onclick="() => Update(null)" class="btn btn-primary">Cancelar</button>
                </div>

            </EditForm>
        </div>
    </div>
}

@if (showAlert)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h4>@statusText</h4>
        </div>
    </div>
}



<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Nombre</th>
            <th>Descripción</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in exams)
        {
            <tr>
                <td>@item.IdExamen</td>
                <td>@item.Nombre</td>
                <td>@item.Descripcion</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => Update(item)">Editar</button>
                    <button class="btn btn-danger" @onclick="() => Delete(item)">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>



@code {
    private EditContext? examContext;
    private ClsExamen? clsExamen;
    private List<Exam> exams = new List<Exam>();
    private string submitText, statusText = "";
    private bool showForm, showAlert, showPopup = false;
    private bool byId, add, filter = false;


    [SupplyParameterFromForm]
    public Exam? ExamModel { get; set; }


    /// <summary>
    /// Initialize 
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        ExamModel ??= new Exam() ;
        examContext = new(ExamModel);

        var wsService = Configuration["AppSettings:WebServiceUrl"];
        var connection = Configuration["ConnectionStrings:DefaultConnection"];
        var useAPI = bool.Parse(Configuration["AppSettings:UseAPI"] ?? "false");
        var list = Configuration.GetSection("Endpoints").GetChildren()
                     .Select(x => x.Value ?? "")
                     .ToList();

        clsExamen = new ClsExamen(Http, wsService!, connection!, useAPI, list);

    }

    /// <summary>
    /// Submit
    /// </summary>
    /// <returns></returns>
    private async Task Submit()
    {
        switch (submitText)
        {
            case "Agregar":
                await AddExam();
                break;
            case "Buscar":
                await GetExams();
                break;
            case "Filtrar":
                await GetExamById();
                break;
        }
    }

    /// <summary>
    /// Update Model
    /// </summary>
    /// <returns></returns>
    public async Task UpdateExam(){
        var response = await clsExamen!.ActualizarExamen(ExamModel);
        if (response!.IsSuccess)
        {
            await GetExamById();
            await ShowAlertInfo("Success");
        }
        else
        {
            await ShowAlertInfo("Error");
        }
    }

    /// <summary>
    /// Pendiente a revision
    /// </summary>
    /// <param name="text"></param>
    /// <returns></returns>
    private async Task ShowAlertInfo(string text){
        statusText = text;
        StateHasChanged();
        showAlert = true;
        await Task.Delay(3000);
        showAlert = false;
        StateHasChanged();
    }


    /// <summary>
    /// Add Exam
    /// </summary>
    /// <returns></returns>
    private async Task AddExam()
    {
        var response = await clsExamen!.AgregarExamen(ExamModel!);

        if (response!.IsSuccess)
        {
            await ShowAlertInfo("Success");
        }
        else
        {
            await ShowAlertInfo("Error");
        }
    }

    /// <summary>
    /// Get Exams
    /// </summary>
    /// <returns></returns>
    public async Task GetExams() {
        var response = await clsExamen!.ConsultarExamenes(ExamModel.Nombre, ExamModel.Descripcion);
        if (response!.IsSuccess)
        {
            exams = response.ResponseData;
        }
        else
        {
            await ShowAlertInfo("Error");
        }
    }

    /// <summary>
    /// Get By Id
    /// </summary>
    /// <returns></returns>
    public async Task GetExamById(){
        var response = await clsExamen!.ConsultarExamen(ExamModel.IdExamen);
        exams = new List<Exam>();
        if (response!.IsSuccess)
        {
            exams.Add(response.ResponseData);
        }
        else
        {
            await ShowAlertInfo("Error");
        }
    }

    /// <summary>
    /// Get Exams
    /// </summary>
    /// <param name="name"></param>
    /// <param name="description"></param>
    /// <returns></returns>
    private async Task GetExams(string name, string description){
        var response = await clsExamen!.ConsultarExamenes(name, description);
        if(response != null && response.IsSuccess){
            exams = response.ResponseData;

        }
        StateHasChanged();
    }


    /// <summary>
    /// Handle Click
    /// </summary>
    /// <param name="action"></param>
    private void HandleClick(int action)
    {
        showForm = true;
        add = action == 1;
        filter = action == 2;
        byId = action == 3;

        if (action != 1) add = false;
        if (action != 2) filter = false;

        submitText = action switch
        {
            1 => "Agregar",
            2 => "Buscar",
            3 => "Filtrar",
            _ => "Desconocido"
        };
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="model"></param>
    /// <returns></returns>
    public async Task Update(Exam model){
        showPopup = !showPopup;
        ExamModel = model;
    }

    /// <summary>
    /// Delete Exam
    /// </summary>
    /// <param name="model"></param>
    /// <returns></returns>
    public async Task Delete(Exam model)
    {
        var response = await clsExamen!.EliminarExamen(model.IdExamen);

        if (response!.IsSuccess)
        {
            exams = new List<Exam>();
            await ShowAlertInfo("Success");
        }
        else
        {
            await ShowAlertInfo("Error");
        }
    }

    /// <summary>
    /// Close form
    /// </summary>
    private void CloseACtion(){
        showForm = false;
    }
    
   

  
   
}